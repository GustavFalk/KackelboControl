@using KackelboControl_App.Models
@using KackelboControl_App.Services
@inject IApiService _apiService
@inject IDateTimeProvider _dateTimeProvider

<div class="temp-log-graph">
    <LogDatePicker SelectedDate="selectedDate" SelectedDateChanged="GetSensorGraph" />
    <div class="graph-container" style="display:@(showGraph ? "block":"none")">
        <LineChart @ref="lineChart" Width="100" WidthUnit="Unit.Percentage" />
    </div>
</div>


@code {

    private SensorValueHistory graphValues = new();
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private bool showGraph;
    private DateTime selectedDate;
    private bool graphInitialized;

    protected override async Task OnInitializedAsync()
    {
        selectedDate = _dateTimeProvider.SweTime();
        await GetLatestSensorHistory();      
        if (graphValues.TemparatureAndTime.Any())
        {
            showGraph = true;
            GraphSetup();
            await lineChart.InitializeAsync(chartData, lineChartOptions);
            graphInitialized = true;
        }
        else
        {
            showGraph = false;
        }
    }

    private async Task GetLatestSensorHistory()
    {
        graphValues = await _apiService.GetLatestSensorHistory();
    }

    private async Task GetSensorGraph(DateTime selected)
    {
        selectedDate = selected;

        if (selectedDate.Date == _dateTimeProvider.SweTime().Date)
        {
            await GetLatestSensorHistory();
        }
        else
        {
            graphValues = await _apiService.GetSensorValueHistory(selected);
        }

        if (graphValues.TemparatureAndTime.Any())
        {
            showGraph = true;
            GraphSetup();
            if (!graphInitialized)
            {
                await lineChart.InitializeAsync(chartData, lineChartOptions);
                graphInitialized = true;
            }
            else
            {
                await lineChart.UpdateAsync(chartData, lineChartOptions);
            }
        }
        else
        {
            showGraph = false;
        }
    }

    private void GraphSetup()
    {
        if (graphValues.TemparatureAndTime.Any())
        {
            var tempAndTimeByTimeLatest = graphValues.TemparatureAndTime.OrderByDescending(x => x.LogTime).ToList();
            var newList = new List<TemperatureAndTime>();

            //Limit the amount of posts in the grid to avoid clutter
            if (tempAndTimeByTimeLatest.Count >= 32)
            {

                foreach (var temp in tempAndTimeByTimeLatest)
                {
                    if (tempAndTimeByTimeLatest.IndexOf(temp) % 4 == 0)
                    {
                        newList.Add(temp);
                    }
                }

                graphValues.TemparatureAndTime = newList.OrderBy(x => x.LogTime).ToList();
            }
            else if (tempAndTimeByTimeLatest.Count >= 16)
            {

                foreach (var temp in tempAndTimeByTimeLatest)
                {
                    if (tempAndTimeByTimeLatest.IndexOf(temp) % 3 == 0)
                    {
                        newList.Add(temp);
                    }
                }

                graphValues.TemparatureAndTime = newList.OrderBy(x => x.LogTime).ToList();
            }
            else if (tempAndTimeByTimeLatest.Count > 8)
            {

                foreach (var temp in tempAndTimeByTimeLatest)
                {
                    if (tempAndTimeByTimeLatest.IndexOf(temp) % 2 == 0)
                    {
                        newList.Add(temp);
                    }
                }
                graphValues.TemparatureAndTime = newList.OrderBy(x => x.LogTime).ToList();
            }

            var labels = new List<string>();
            var indoors = new List<double>();
            var outdoors = new List<double>();
            foreach (var value in graphValues.TemparatureAndTime)
            {
                labels.Add(value.LogTime.ToString("HH:mm"));
                indoors.Add((double)value.IndoorTemperature);
                outdoors.Add((double)value.OutdoorTemperature);

            }

            var datasets = new List<IChartDataset>();

            var dataset1 = new LineChartDataset()
                {
                    Label = "Inomhus",
                    Data = indoors,
                    BackgroundColor = new List<string> { "#f17a65" },
                    BorderColor = new List<string> { "#f17a65" },
                    HoverBorderWidth = new List<double> { 4 },
                    PointBackgroundColor = new List<string> { "#f17a65" },
                    PointRadius = new List<int> { 5 }, // hide points
                    PointHoverRadius = new List<int> { 4 },
                };
            datasets.Add(dataset1);

            var dataset2 = new LineChartDataset()
                {
                    Label = "Utomhus",
                    Data = outdoors,
                    BackgroundColor = new List<string> { "#3dcadf" },
                    BorderColor = new List<string> { "#3dcadf" },
                    HoverBorderWidth = new List<double> { 4 },
                    PointBackgroundColor = new List<string> { "#3dcadf" },
                    PointRadius = new List<int> { 5 }, // hide points
                    PointHoverRadius = new List<int> { 4 },
                };
            datasets.Add(dataset2);

            chartData = new ChartData
                {
                    Labels = labels,
                    Datasets = datasets

                };

            lineChartOptions = new();
            lineChartOptions.Responsive = true;
            lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

            lineChartOptions.Scales.X.Title.Display = false;
            lineChartOptions.Scales.Y.Title.Display = false;
            lineChartOptions.Plugins.Title.Display = false;
        }
    }
}
