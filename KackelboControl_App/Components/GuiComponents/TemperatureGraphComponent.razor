@using KackelboControl_App.Models
@using KackelboControl_App.Services
@inject IApiService _apiService
@inject IDateTimeProvider _dateTimeProvider

<LineChart @ref="lineChart" Width="100" WidthUnit="Unit.Percentage"  />

@code {



    private SensorValueHistory graphValues = new();
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    protected override async Task OnInitializedAsync()
    {
        await GetLatestSensorHistory();

        if (graphValues.TemparatureAndTime.Any())
        {

            var labels = new List<string>();
            var indoors = new List<double>();
            var outdoors = new List<double>();
            foreach(var value in graphValues.TemparatureAndTime)
            {
                labels.Add(value.LogTime.ToString("HH:mm"));
                indoors.Add((double)value.IndoorTemperature);
                outdoors.Add((double)value.OutdoorTemperature);

            }

            var datasets = new List<IChartDataset>();

            var dataset1 = new LineChartDataset()
                {
                    Label = "Inomhus",
                    Data = indoors,
                    BackgroundColor = new List<string> { "#f17a65" },
                    BorderColor = new List<string> { "#f17a65" },                  
                    HoverBorderWidth = new List<double> { 4 },
                    PointBackgroundColor = new List<string> { "#f17a65" },
                    PointRadius = new List<int> { 5 }, // hide points
                    PointHoverRadius = new List<int> { 4 },
                };
            datasets.Add(dataset1);

            var dataset2 = new LineChartDataset()
                {
                    Label = "Utomhus",
                    Data = outdoors,
                    BackgroundColor = new List<string> { "#3dcadf" },
                    BorderColor = new List<string> { "#3dcadf" },                   
                    HoverBorderWidth = new List<double> { 4 },
                    PointBackgroundColor = new List<string> { "#3dcadf" },
                    PointRadius = new List<int> { 5 }, // hide points
                    PointHoverRadius = new List<int> { 4 },
                };
            datasets.Add(dataset2);  

            chartData = new ChartData
                {
                    Labels = labels,
                    Datasets = datasets

                };

            lineChartOptions = new();
            lineChartOptions.Responsive = true;
            lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

            lineChartOptions.Scales.X.Title.Display = false;
            lineChartOptions.Scales.Y.Title.Display = false;
            lineChartOptions.Plugins.Title.Display = false;

            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }

    }


    private async Task GetLatestSensorHistory()
    {
        graphValues = await _apiService.GetSensorValueHistory(_dateTimeProvider.SweTime());
    }

    private async Task GetSensorValueHistory()
    {
        graphValues = await _apiService.GetSensorValueHistory(_dateTimeProvider.SweTime());
    }
}
