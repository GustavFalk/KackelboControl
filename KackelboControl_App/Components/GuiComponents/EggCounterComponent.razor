@using KackelboControl_App.Models
@using KackelboControl_App.Services
@using System.Globalization
@inject IDateTimeProvider _dateTimeProvider
@inject IApiService _apiService
<div class="egg-wrapper">
    <div class="top-egg-row">
        <div class="card-header">
            <h3>Ägglogg</h3>  
            <LogDatePicker SelectedDate="selectedDate" SelectedDateChanged="GetEggCount" />
        </div>
        <img class="hen" src="./images/brownhennest.png" />
    </div>

    <div class="eggRow">
        @foreach (var egg in Eggs)
        {
            <div class="eggContainer" @onclick=@(()=>SelectEgg(egg))>              
                <img class="@(egg.EggSelected ? "egg":"notSelectedEgg")" src="./images/EGG.png" />            
            </div>
        }
    </div>
    <div class="graph-wrapper">
        <LineChart @ref="eggChart" Width="100" WidthUnit="Unit.Percentage" />
    </div>
</div>

@code {

    private LineChart eggChart = default!;
    private LineChartOptions eggChartOptions = default!;
    private ChartData eggData = default!;
    private List<EggCount> eggLog = new();

    private DateTime selectedDate;
    private int? selectedDayEggCount;
    private List<Egg> Eggs = new List<Egg>()
    {
        new Egg(),
        new Egg(),
        new Egg(),
        new Egg(),
        new Egg(),
        new Egg(),
        new Egg()
    };

    protected override async Task OnInitializedAsync()
    {
        selectedDate = _dateTimeProvider.SweTime();
        await GetEggCount(selectedDate);
        await GetEggLog();
        await base.OnInitializedAsync();
    }

    private async Task GetEggCount(DateTime selected)
    {
        selectedDate = selected;

        selectedDayEggCount = await _apiService.GetEggCount(DateOnly.FromDateTime(selected));

        int eggIndex = 0;
        foreach(Egg egg in Eggs)
        {
            if (eggIndex < selectedDayEggCount)
            {
                Eggs[eggIndex].EggSelected = true;
            }
            else
            {
                Eggs[eggIndex].EggSelected = false;
            }
            eggIndex++;
        }
     }

    private async Task SelectEgg(Egg egg)
    {
        egg.EggSelected = !egg.EggSelected;
        selectedDayEggCount = Eggs.Where(x => x.EggSelected).Count();
        await PostEggCount(selectedDayEggCount ?? 0);
    }

    private async Task PostEggCount(int eggTotal)
    {
        EggCount eggCount = new()
            {
                Count = eggTotal,
                CountDate = DateOnly.FromDateTime(selectedDate)
            };
        await _apiService.PostEggCount(eggCount);

        eggLog.Where(x => x.CountDate == eggCount.CountDate).FirstOrDefault().Count = eggTotal;
        InitializeEggGraph();
        await eggChart.UpdateAsync(eggData, eggChartOptions);
    }

    private async Task GetEggLog()
    {
        eggLog = await _apiService.GetEggCountLog();

        if (eggLog.Any())
        {
            InitializeEggGraph();
            await eggChart.InitializeAsync(eggData, eggChartOptions);
        }
    }

    private void InitializeEggGraph()
    {
        var labels = new List<string>();
        var eggs = new List<double>();

        foreach (var value in eggLog)
        {
            labels.Add(Helpers.DayToSwe(value.CountDate.DayOfWeek.ToString()));
            eggs.Add(value.Count);
        }

        var datasets = new List<IChartDataset>();

        var dataset1 = new LineChartDataset()
            {
                Label = "Antal ägg",
                Data = eggs,
                BackgroundColor = new List<string> { "#EA8F62" },
                BorderColor = new List<string> { "#EA8F62" },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { "#EA8F62" },
                PointRadius = new List<int> { 5 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };
        datasets.Add(dataset1);


        eggData = new ChartData
            {
                Labels = labels,
                Datasets = datasets

            };

        eggChartOptions = new();
        eggChartOptions.Responsive = true;
        eggChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        eggChartOptions.Scales.X.Title.Display = false;
        eggChartOptions.Scales.Y.Title.Display = false;
        eggChartOptions.Plugins.Title.Display = false;
    }
}
