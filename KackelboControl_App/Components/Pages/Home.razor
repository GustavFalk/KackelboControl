@page "/"
@using KackelboControl_App.Components.GuiComponents
@using KackelboControl_App.Models
@using KackelboControl_App.Services
@inject IApiService _apiService
@inject IDateTimeProvider _dateTimeProvider

<div class="page-wrapper" style="width:100%;">
    <SunTrackerComponent StartTime="triggers.LightOnTime" EndTime="triggers.LightOffTime" />
    <EggCounterComponent />
    <ThermometerComponent Temperature="@latestInnerTemp" />
    <ThermometerComponent Temperature="@latestOuterTemp" />
    <TemperatureGraphComponent />
</div>

@code {

    private SensorTriggers triggers = new();
    private List<EggCount> eggCountLog = new();
    private SensorValueHistory latestValues = new();

    private decimal latestInnerTemp = 0;
    private decimal latestOuterTemp = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetSensorTriggers();
        await GetLatestSensorHistory();
        await base.OnInitializedAsync();
    }

    private async Task GetSensorTriggers()
    {
        triggers = await _apiService.GetSensorTriggers();
    }

    private async Task UpdateSensorTriggers()
    {
        var update = new UpdateSensorTriggers()
            {
                LightOnTime = new TimeOnly(08, 00),
                LightOffTime = new TimeOnly(20, 35),
                MinTemp = 15.52m,
                MaxTemp = 21,
                UseSunLight = false
            };
        triggers = await _apiService.UpdateSensorTriggers(update);
    }

    private async Task GetEggCountLog()
    {
        eggCountLog = await _apiService.GetEggCountLog();
    }

    private async Task GetLatestSensorHistory()
    {
        latestValues = await _apiService.GetSensorValueHistory(_dateTimeProvider.SweTime());
        if (latestValues.TemparatureAndTime.Any())
        {
            latestInnerTemp = latestValues.TemparatureAndTime.OrderByDescending(x => x.LogTime).FirstOrDefault().IndoorTemperature;
            latestOuterTemp = latestValues.TemparatureAndTime.OrderByDescending(x => x.LogTime).FirstOrDefault().OutdoorTemperature;
        }
    }


}