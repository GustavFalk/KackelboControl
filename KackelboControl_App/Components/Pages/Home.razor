@page "/"
@using KackelboControl_App.Models
@using KackelboControl_App.Services
@inject IApiService _apiService
@inject IDateTimeProvider _dateTimeProvider







<div class="sun-container">
    <div class="sun-curve">
        <div class="sun-gradient">
            <div class="sun-cover">
                <img src="./images/brownhennest.png" />
            </div>
        </div>
    </div>
</div>



<div style="display:flex; gap:5px">
    @foreach (var egg in Eggs)
    {
        <div style="border-radius:50%; border:3px solid black; width:20px; height:30px; @(egg.EggSelected ? "background:#6b4e2a":"")" @onclick=@(()=>SelectEgg(egg))>
        </div>
        <br />
    }
</div>

<style>

    .sun-gradient {
        background: conic-gradient(yellow @($"{gradient}%"), transparent 0);
    }
</style>


@code {

    decimal gradient;
    private SensorTriggers triggers = new();
    private List<EggCount> eggCountLog = new();
    private int? selectedDayEggCount;
    private List<Egg> Eggs = new List<Egg>()
    {
        new Egg(),
        new Egg(),
        new Egg(),
        new Egg(),
        new Egg(),
        new Egg(),
        new Egg()
    };


    protected override async Task OnInitializedAsync()
    {

        CalculateSun();
        await GetSensorTriggers();
        await GetEggCount();

        await base.OnInitializedAsync();
    }

    private async Task SelectEgg(Egg egg)
    {
        egg.EggSelected = !egg.EggSelected;
        selectedDayEggCount = Eggs.Where(x => x.EggSelected).Count();
        await PostEggCount(selectedDayEggCount ?? 0);
    }

    private async Task GetSensorTriggers()
    {
        triggers = await _apiService.GetSensorTriggers();
    }

    private async Task UpdateSensorTriggers()
    {
        var update = new UpdateSensorTriggers()
            {
                LightOnTime = new TimeOnly(08, 00),
                LightOffTime = new TimeOnly(20, 35),
                MinTemp = 15.52m,
                MaxTemp = 21,
                UseSunLight = false
            };
        triggers = await _apiService.UpdateSensorTriggers(update);
    }

    private async Task PostEggCount(int eggTotal)
    {
        EggCount eggCount = new()
            {
                Count = eggTotal,
                CountDate = DateOnly.FromDateTime(_dateTimeProvider.SweTime())
            };
        await _apiService.PostEggCount(eggCount);
    }

    private async Task GetEggCountLog()
    {
        eggCountLog = await _apiService.GetEggCountLog();
    }

    private async Task GetEggCount()
    {
        selectedDayEggCount = await _apiService.GetEggCount(DateOnly.FromDateTime(_dateTimeProvider.SweTime()));
        for (int i = 0; i < selectedDayEggCount; i++)
        {
            Eggs[i].EggSelected = true;
        }
    }

    private async Task GetSensorValueHistory()
    {
        var history = await _apiService.GetSensorValueHistory(_dateTimeProvider.SweTime());
    }

    private void CalculateSun()
    {
        decimal startTime = 8;
        decimal endTime = 20;
        decimal nowTime = 16;
        decimal totalTime = endTime - startTime;
        decimal timeGone = nowTime - startTime;
        decimal percentageOfDay = (timeGone / totalTime) * 100;
        gradient = percentageOfDay / 2;

    }

}